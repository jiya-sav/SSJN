{
  
    
        "post0": {
            "title": "College Board Final Mc Reflection",
            "content": ". . Reflection: Although my logic was correct, I chose the answer choice with the wrong order of code. The actual answer involved appending the list first, which makes sense since the problem says that it is initially empty. . . Reflection: With the answer I chose, the output would be: word 1 = yarn, word 2 = zebra, and word 3 = xylophone. I knew that a temp would be needed and assigned to word 3, but the correct choice would have been choice b rather than c, since it produced the correct order of updated values. . . Reflection: When I saw the word “string,” I thought of the actual meaning, which is a word variable. However, this question was asking about a list index, which is the position of a list item. The position can’t be negative, contain a decimal, or be a word, so therefore the answer is 4. . . Reflection: The logic for this code segment is to first set the variable x to 0, and the variable result also to 0. Then, in a loop, variables x and result are added to set the new result value. At the end of the loop, 1 is added to x. This is done until the value of x is greater than 5. Loop iterations are outlined below: . 1st: x = 0, result = 0, new result = x + result = 0, new x = 1 . 2nd: x = 1, result = 0, new result = x + result = 1, new x = 2 . 3rd: x = 2, result = 1, new result = x + result = 3, new x = 3 . 4th: x = 3, result = 3, new result = x + result = 6, new x = 4 . 5th: x = 4, result = 6, new result = x + result = 10, new x = 5 ← this is where I stopped last time, so I incorrectly put the answer as 10 . 6th: x = 5, result = 10, new result = x + result = 15, new x = 6 ← answer is 15, since now x &gt; 5 . . Reflection: Although my calculations for the first 3 answer choices were correct, I didn’t employ PEMDAS for value d, which was c + d/2, while my first choice was to do (c + d)/2. . Unsure . . Reflection: I did not understand the logic for this question when I first read it, so this answer was guess and just happened to be correct. I consulted an industry professional to try and better understand the logic. The lists j and k should both be within the length of numList. The program’s documentation is what is provided to the user of the program to keep in mind before using it. The user should make sure j and k are within the parameters listed and should know the purpose, to interchange j and k. . *However, the indices should be starting at 0, not 1 . . Reflection: The inner loop always starts with one element after the outer loop ( k ← j+1). Hence, the comparison is always with the subsequent elements at each iteration. . All the binary questions . Reflection: I need practice with binary to decimal conversions, which I will watch youtube videos for and learn .",
            "url": "https://jiya-sav.github.io/SSJN/2022/11/09/College-Board-Final-MC-Reflection.html",
            "relUrl": "/2022/11/09/College-Board-Final-MC-Reflection.html",
            "date": " • Nov 9, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Team Project Screenshots",
            "content": "Github Fastpages . “input emotion” page . . song api md file . . Flask Page: . song api python file . . model songs python file . .",
            "url": "https://jiya-sav.github.io/SSJN/markdown/2022/11/04/projectscreenshots.html",
            "relUrl": "/markdown/2022/11/04/projectscreenshots.html",
            "date": " • Nov 4, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Title",
            "content": "Song Sad Happy Rage . &lt;/script&gt; . &lt;script&gt; // prepare HTML defined &quot;result&quot; container for new output const resultContainer = document.getElementById(&quot;result&quot;); // keys for joke reactions const SAD = &quot;sad&quot;; const HAPPY = &quot;happy&quot;; const RAGE = &quot;rage&quot;; // prepare fetch urls const url = &quot;http://ssjn.nighthawkcodescrums.gq/api/song&quot;; const sad_url = url + &quot;/sad/&quot;; // haha reaction const happy_url = url + &quot;/happy/&quot;; // boohoo reaction const rage_url = url + &quot;/rage/&quot;; // boohoo reaction // prepare fetch GET options const options = { method: &#39;GET&#39;, // *GET, POST, PUT, DELETE, etc. mode: &#39;cors&#39;, // no-cors, *cors, same-origin cache: &#39;default&#39;, // *default, no-cache, reload, force-cache, only-if-cached credentials: &#39;omit&#39;, // include, *same-origin, omit headers: { &#39;Content-Type&#39;: &#39;application/json&#39; // &#39;Content-Type&#39;: &#39;application/x-www-form-urlencoded&#39;, }, }; // prepare fetch PUT options, clones with JS Spread Operator (...) const put_options = {...options, method: &#39;PUT&#39;}; // clones and replaces method // fetch the API fetch(url, options) // response is a RESTful &quot;promise&quot; on any successful fetch .then(response =&gt; { // check for response errors if (response.status !== 200) { error(&#39;GET API response failure: &#39; + response.status); return; } // valid response will have JSON data response.json().then(data =&gt; { console.log(data); for (const row of data) { // make &quot;tr element&quot; for each &quot;row of data&quot; const tr = document.createElement(&quot;tr&quot;); // td for joke cell const song = document.createElement(&quot;td&quot;); song.innerHTML = row.id + &quot;. &quot; + row.song; // add fetched data to innerHTML // td for haha cell with onclick actions (making the buttons) const sad = document.createElement(&quot;td&quot;); const sad_but = document.createElement(&#39;button&#39;); sad_but.id = SAD+row.id // establishes a HAHA JS id for cell sad_but.innerHTML = row.sad; // add fetched &quot;haha count&quot; to innerHTML sad_but.onclick = function () { // onclick function call with &quot;like parameters&quot; reaction(SAD, sad_url+row.id, sad_but.id); }; sad.appendChild(sad_but); // add &quot;haha button&quot; to haha cell // td for boohoo cell with onclick actions const happy = document.createElement(&quot;td&quot;); const happy_but = document.createElement(&#39;button&#39;); happy_but.id = HAPPY+row.id // establishes a BOOHOO JS id for cell happy_but.innerHTML = row.happy; // add fetched &quot;boohoo count&quot; to innerHTML happy_but.onclick = function () { // onclick function call with &quot;jeer parameters&quot; reaction(HAPPY, happy_url+row.id, happy_but.id); }; happy.appendChild(happy_but); // add &quot;boohoo button&quot; to boohoo cell // td for haha cell with onclick actions (making the buttons) const rage = document.createElement(&quot;td&quot;); const rage_but = document.createElement(&#39;button&#39;); rage_but.id = RAGE+row.id // establishes a HAHA JS id for cell rage_but.innerHTML = row.rage; // add fetched &quot;haha count&quot; to innerHTML rage_but.onclick = function () { // onclick function call with &quot;like parameters&quot; reaction(RAGE, rage_url+row.id, rage_but.id); }; rage.appendChild(rage_but); // add &quot;haha button&quot; to haha cell // this builds ALL td&#39;s (cells) into tr (row) element tr.appendChild(song); tr.appendChild(sad); tr.appendChild(happy); tr.appendChild(rage); // this adds all the tr (row) work above to the HTML &quot;result&quot; container resultContainer.appendChild(tr); } }) }) // catch fetch errors (ie Nginx ACCESS to server blocked) .catch(err =&gt; { error(err + &quot; &quot; + url); }); // Reaction function to likes or jeers user actions function reaction(type, put_url, elemID) { // fetch the API fetch(put_url, put_options) // response is a RESTful &quot;promise&quot; on any successful fetch .then(response =&gt; { // check for response errors if (response.status !== 200) { error(&quot;PUT API response failure: &quot; + response.status) return; // api failure } // valid response will have JSON data response.json().then(data =&gt; { console.log(data); // Likes or Jeers updated/incremented if (type === SAD) // like data element document.getElementById(elemID).innerHTML = data.sad; // fetched haha data assigned to haha Document Object Model (DOM) else if (type === HAPPY) // jeer data element document.getElementById(elemID).innerHTML = data.happy; // fetched boohoo data assigned to boohoo Document Object Model (DOM) else if (type === RAGE) document.getElementById(elemID).innerHTML = data.rage; else error(&quot;unknown type: &quot; + type); // should never occur }) }) // catch fetch errors (ie Nginx ACCESS to server blocked) .catch(err =&gt; { error(err + &quot; &quot; + put_url); }); } // Something went wrong with actions or responses function error(err) { // log as Error in console console.error(err); // append error to resultContainer const tr = document.createElement(&quot;tr&quot;); const td = document.createElement(&quot;td&quot;); td.innerHTML = err; tr.appendChild(td); resultContainer.appendChild(tr); } &lt;/script&gt; . evalmachine.&lt;anonymous&gt;:1 &lt;script&gt; ^ SyntaxError: Unexpected token &lt; at createScript (vm.js:56:10) at Object.runInThisContext (vm.js:97:10) at run ([eval]:1020:15) at onRunRequest ([eval]:864:18) at onMessage ([eval]:828:13) at emitTwo (events.js:106:13) at process.emit (events.js:191:7) at process.nextTick (internal/child_process.js:758:12) at _combinedTickCallback (internal/process/next_tick.js:73:7) at process._tickCallback (internal/process/next_tick.js:104:9) .",
            "url": "https://jiya-sav.github.io/SSJN/2022/10/24/songs-api-frontend.html",
            "relUrl": "/2022/10/24/songs-api-frontend.html",
            "date": " • Oct 24, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Project Week 1 Blog",
            "content": "Error on Web Domain . . Error, non-functional curl . . Error . . Solution: To solve this error, quite simply, we read the instructions in the error message. In the error message, we noticed that “persistent_volume:/app/volumes” and “/home/ubuntu/SSJN_flask/volumes” were the place where our error sat. Recognizing that these directories were part of the docker compose file, we went back to our docker compose file to investigate. We remembered we’d changed the name of our flask repository on AWS from SSJN_flask to p3t2_ssjn_flask, but this change hadn’t been reflected in the docker compose file. So, we quickly changed the “device” to p3t2_ssjn_flask instead of SSJN_flask. The next time we tried to run the sudo docker/compose up -d command, it worked. However, it first asked us to use the -rm command to start routing our changes to the new file. It only took us 10 minutes to fix this big error! This demonstrates that our whole team truly has a thorough understanding of how AWS deployment works. . Error fixed: . .",
            "url": "https://jiya-sav.github.io/SSJN/markdown/2022/10/23/Error-Blog.html",
            "relUrl": "/markdown/2022/10/23/Error-Blog.html",
            "date": " • Oct 23, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "SSJN Project Purpose",
            "content": "SSJN Group Project . How it will Work . Users enter their current emotion into a text entry box | User is then prompted to fill out an optional survey to further personalize song list. | The program outputs a list of songs that match their current emotion, with spotify links embedded, so the users can explore new music! | Spotify x SSJN! . . xxx . . Roles . Scrum Master: Shreya Sapkal | Frontend Developer: Noor Grewal | Backend Developers: Sanika Shahapurkar &amp; Jiya Savlani | . Implementation: 6 Principles of College Board . Program Purpose and Function | To help users discover new types of music, artists, and songs. To help users diversify their music listening experience. To match users with a list of songs to listen to depending on their current emotion. Input: Emotion/Mood (out of options provided) Output: Song that matches mood (selected out of info provided from API, additional information like lyrics or link to listen may be provided) . Data Abstraction | Output will be displayed using a list, to provide multiple song options to diversify users listening experience. Planned name of varibale representing list: Melancholy = [“I Bet On Losing Dogs”, “See You Again”, “Burning Hill”] Data in this list represents music type . Managing Complexity | By using lists to display song output, it is not necessary to write continuous lines of if/else statements, though they may still be useful for further personalization. In case that list is not used to provide songs, multiple functions may have to be written and printed seperately ex: if Emotion=Melancholy print(“I Bet On Losing Dogs”” print(“See You Again”) print(“Burning Hill”) . Procedural Abstraction | Use procedural abstraction to account for user error input, to ensure selected Emotion is existent in program ex: def emotion_input if Emotion = melancholy print(“Melancholy”) elif Emotion = joy print(“Joy”) else print(“Please input emotion”) . Algorithm Implementation sequencing Use of strings and lists to output song information, as well as error information (shown above) | selection Use of if/else/elif statements (as shown above) | iteration Use of for loops (*still planning how this may be implemented productively into program given function) ex: emotion = [“melancholy”, “joy”, “rage”] for x in emotion: if x == “joy”: break print(x) | . | Testing | Test each cell, which will be organized by purpose. Each line will have notes to ensure we manage complexity, as well as best enabling ourselves to explain in video. .",
            "url": "https://jiya-sav.github.io/SSJN/markdown/2022/09/25/team-project-purpose.html",
            "relUrl": "/markdown/2022/09/25/team-project-purpose.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Team Agile Methodology Charts",
            "content": "Below is Jiya’s Chart: . . Below is our Team Chart: . .",
            "url": "https://jiya-sav.github.io/SSJN/markdown/week%205/2022/09/25/TeamAgileMethodologyCharts.html",
            "relUrl": "/markdown/week%205/2022/09/25/TeamAgileMethodologyCharts.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "Fetch of Backend",
            "content": "| Overview | Covid19 RapidAPI | Songs API | Users Database | . . Song Sad Happy Rage Indian . .",
            "url": "https://jiya-sav.github.io/SSJN/data/songs",
            "relUrl": "/data/songs",
            "date": " • Jul 10, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://jiya-sav.github.io/SSJN/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post8": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://jiya-sav.github.io/SSJN/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  
      ,"page0": {
          "title": "About Us",
          "content": "Hello! This is the SSJN Group Repository where we will be blogging about our group projects and individual interests we want to share. . . Name Fun Fact Role . Sanika | I love music, going to concerts, and thrifting! | Backend Developer | . Noor | I enjoy painting, traveling, and sleeping. I have 5 pets (3 dogs, 2 cats) | Frontend Developer | . Shreya | I love hiking, karate, and studying engine maintenance manuals. | Scrum Master | . Jiya | I like to read, play the piano, and spend time with my family at the beach. | Backend Developer | .",
          "url": "https://jiya-sav.github.io/SSJN/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  
      ,"page1": {
          "title": "Melancholy",
          "content": "Melancholy 😔 . . . Input . User enters “sad,” “melancholy,” or any synonym into text box input: . . Output . Program outputs a list of songs to match the melancholy emotion . Collaborate with backend developers to create a python list for each emotion; output includes links to the songs recommended | . Example songs: . “First Love/Late Spring” Mitski | “YKWIM?” Yot Club | “Last Words of a Shooting Star” Mitski | “Liquid Smooth” Mitski | “While My Guitar Gently Weeps” The Beatles | “Francis Forever” Mitski | “Thank You” Dido | “I Bet on Losing Dogs” Mitski | “Twilight” bôa | “People” Agust D | “It just is” eaj ft. Seori | “Who” Lauv ft. BTS | “eclipse” ASH ISLAND | “Pity Party” Melanie Martinez | “See You Again” Wiz Khalifa ft. Charlie Puth | “Let You Down” NF | “Better Now” Post Malone | “One Last Time” Ariana Grande | “Dive with you” Seori ft. eaj | “The One That Got Away” Katy Perry | “Breakeven” The Script | “Let Her Go” Passenger | “Talking to the Moon” Bruno Mars | “The Scientist” Coldplay | “I took a pill in Ibiza” Mike Posner | “Jealous” Labrinth | ”” | ”” | ”” | ”” | .",
          "url": "https://jiya-sav.github.io/SSJN/melancholy/",
          "relUrl": "/melancholy/",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "Joy",
          "content": "Joy! . . . List songs, collaborate with backend developers to create a python list for each emotion . Example songs: . “Bumblebee” Dora Jar | “Jackie and Wilson” Hozier | “Pumpkin” Regrettes | “Solar Power” Lorde | “Marvelous” Wallows | “Island In The Sun” Weezer | “Olivia” One Direction | “Mr. Blue Sky” Electric Light Orchestra | .",
          "url": "https://jiya-sav.github.io/SSJN/joy/",
          "relUrl": "/joy/",
          "date": ""
      }
      
  

  
      ,"page3": {
          "title": "Rage",
          "content": "Rage 😠 . . . List songs, collaborate with backend developers to create a python list for each emotion . Example songs: . “Numb” Linkin Park | “Testify” Rage Against The Machine | “Bat Country” Avenged Sevenfold | “T.N.T.” AC/DC | “King Nothing” Metallica | “Highway to Hell” AC/DC | “Devil’s Dance” Metallica | “I Hate Everything About You” Three Days Grace | “Motorbreath” Metallica | .",
          "url": "https://jiya-sav.github.io/SSJN/rage/",
          "relUrl": "/rage/",
          "date": ""
      }
      
  

  

  
      ,"page5": {
          "title": "API",
          "content": "| Overview | Covid19 RapidAPI | Songs API | Users Database | .",
          "url": "https://jiya-sav.github.io/SSJN/api/",
          "relUrl": "/api/",
          "date": ""
      }
      
  

  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page15": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://jiya-sav.github.io/SSJN/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}